#!/usr/bin/env python3
"""
üîó Neo4j Connection Pool - Sistema Otimizado de Conex√µes
Pool de conex√µes Neo4j com singleton, circuit breaker e retry logic
"""

import os
import time
import threading
import asyncio
from datetime import datetime, timedelta
from typing import Any, Dict, List, Optional, Union, Callable, ContextManager
from dataclasses import dataclass, field
from enum import Enum
from contextlib import contextmanager
from concurrent.futures import ThreadPoolExecutor, Future
import logging
import queue
import weakref

# Neo4j imports
try:
    from neo4j import GraphDatabase, Driver, Session, Transaction, Result
    from neo4j.exceptions import ServiceUnavailable, TransientError, ClientError
except ImportError:
    print("‚ö†Ô∏è  Neo4j driver n√£o instalado. Execute: pip install neo4j")
    raise

# Local imports
from .cache_manager import get_cache, CacheConfig, CachePolicy

logger = logging.getLogger(__name__)


class ConnectionState(Enum):
    """Estados da conex√£o"""
    HEALTHY = "healthy"
    DEGRADED = "degraded"
    FAILED = "failed"
    CIRCUIT_OPEN = "circuit_open"


class CircuitBreakerState(Enum):
    """Estados do Circuit Breaker"""
    CLOSED = "closed"
    OPEN = "open"
    HALF_OPEN = "half_open"


@dataclass
class Neo4jConfig:
    """Configura√ß√£o do Neo4j"""
    uri: str = field(default_factory=lambda: os.getenv("NEO4J_URI", "bolt://localhost:7687"))
    username: str = field(default_factory=lambda: os.getenv("NEO4J_USERNAME", "neo4j"))
    password: str = field(default_factory=lambda: os.getenv("NEO4J_PASSWORD", "password"))
    database: str = field(default_factory=lambda: os.getenv("NEO4J_DATABASE", "neo4j"))
    max_connection_lifetime: int = 3600  # 1 hora
    max_connection_pool_size: int = 50
    connection_acquisition_timeout: int = 60
    encrypted: bool = False
    trust: str = "TRUST_ALL_CERTIFICATES"
    
    def __post_init__(self):
        """Valida√ß√£o p√≥s-inicializa√ß√£o"""
        if not self.uri.startswith(('bolt://', 'neo4j://', 'bolt+s://', 'neo4j+s://')):
            raise ValueError(f"URI Neo4j inv√°lida: {self.uri}")


@dataclass
class CircuitBreakerConfig:
    """Configura√ß√£o do Circuit Breaker"""
    failure_threshold: int = 5
    recovery_timeout: int = 60
    half_open_max_calls: int = 3
    expected_exception: tuple = (ServiceUnavailable, TransientError)


@dataclass
class PoolStats:
    """Estat√≠sticas do pool de conex√µes"""
    total_connections: int = 0
    active_connections: int = 0
    idle_connections: int = 0
    failed_connections: int = 0
    total_queries: int = 0
    successful_queries: int = 0
    failed_queries: int = 0
    avg_query_time: float = 0.0
    circuit_breaker_state: str = "closed"
    last_health_check: Optional[datetime] = None
    uptime: timedelta = field(default_factory=lambda: timedelta(0))
    
    @property
    def success_rate(self) -> float:
        """Taxa de sucesso das queries"""
        if self.total_queries == 0:
            return 0.0
        return self.successful_queries / self.total_queries
    
    @property
    def failure_rate(self) -> float:
        """Taxa de falha das queries"""
        return 1.0 - self.success_rate


class Neo4jCircuitBreaker:
    """Circuit Breaker para conex√µes Neo4j"""
    
    def __init__(self, config: CircuitBreakerConfig):
        self.config = config
        self.state = CircuitBreakerState.CLOSED
        self.failure_count = 0
        self.last_failure_time: Optional[datetime] = None
        self.half_open_calls = 0
        self._lock = threading.Lock()
    
    def call(self, func: Callable, *args, **kwargs) -> Any:
        """
        Executa fun√ß√£o atrav√©s do circuit breaker
        
        Args:
            func: Fun√ß√£o a executar
            *args: Argumentos posicionais
            **kwargs: Argumentos nomeados
            
        Returns:
            Resultado da fun√ß√£o
            
        Raises:
            Exception: Se circuit breaker estiver aberto ou fun√ß√£o falhar
        """
        with self._lock:
            if self.state == CircuitBreakerState.OPEN:
                if self._should_attempt_reset():
                    self.state = CircuitBreakerState.HALF_OPEN
                    self.half_open_calls = 0
                    logger.info("Circuit breaker mudou para HALF_OPEN")
                else:
                    raise ServiceUnavailable("Circuit breaker OPEN - Neo4j indispon√≠vel")
            
            if self.state == CircuitBreakerState.HALF_OPEN:
                if self.half_open_calls >= self.config.half_open_max_calls:
                    self.state = CircuitBreakerState.OPEN
                    logger.warning("Circuit breaker voltou para OPEN")
                    raise ServiceUnavailable("Circuit breaker OPEN - muitas falhas em HALF_OPEN")
        
        try:
            result = func(*args, **kwargs)
            self._on_success()
            return result
        except self.config.expected_exception as e:
            self._on_failure(e)
            raise
        except Exception as e:
            # N√£o contar exce√ß√µes n√£o relacionadas ao Neo4j
            logger.debug(f"Exce√ß√£o n√£o relacionada ao circuit breaker: {e}")
            raise
    
    def _should_attempt_reset(self) -> bool:
        """Verifica se deve tentar resetar o circuit breaker"""
        if self.last_failure_time is None:
            return True
        
        elapsed = (datetime.now() - self.last_failure_time).total_seconds()
        return elapsed >= self.config.recovery_timeout
    
    def _on_success(self) -> None:
        """Chamado quando opera√ß√£o √© bem-sucedida"""
        with self._lock:
            if self.state == CircuitBreakerState.HALF_OPEN:
                self.half_open_calls += 1
                if self.half_open_calls >= self.config.half_open_max_calls:
                    self.state = CircuitBreakerState.CLOSED
                    self.failure_count = 0
                    logger.info("Circuit breaker voltou para CLOSED")
            elif self.state == CircuitBreakerState.CLOSED:
                self.failure_count = 0
    
    def _on_failure(self, exception: Exception) -> None:
        """Chamado quando opera√ß√£o falha"""
        with self._lock:
            self.failure_count += 1
            self.last_failure_time = datetime.now()
            
            if self.state == CircuitBreakerState.HALF_OPEN:
                self.state = CircuitBreakerState.OPEN
                logger.warning("Circuit breaker ABERTO ap√≥s falha em HALF_OPEN")
            elif self.failure_count >= self.config.failure_threshold:
                self.state = CircuitBreakerState.OPEN
                logger.warning(f"Circuit breaker ABERTO - {self.failure_count} falhas consecutivas")


class ConnectionWrapper:
    """Wrapper para conex√£o Neo4j com m√©tricas e controle"""
    
    def __init__(self, session: Session, pool: 'Neo4jConnectionPool'):
        self.session = session
        self.pool = pool
        self.created_at = datetime.now()
        self.last_used = datetime.now()
        self.query_count = 0
        self.is_active = True
        self.connection_id = id(self)
    
    def run(self, query: str, parameters: Optional[Dict] = None, **kwargs) -> Result:
        """
        Executa query com m√©tricas
        
        Args:
            query: Query Cypher
            parameters: Par√¢metros da query
            **kwargs: Argumentos adicionais
            
        Returns:
            Resultado da query
        """
        start_time = time.time()
        self.last_used = datetime.now()
        self.query_count += 1
        
        try:
            result = self.session.run(query, parameters, **kwargs)
            
            # Registrar sucesso
            execution_time = time.time() - start_time
            self.pool._record_query_success(execution_time)
            
            logger.debug(f"Query executada com sucesso em {execution_time:.3f}s")
            return result
            
        except Exception as e:
            # Registrar falha
            execution_time = time.time() - start_time
            self.pool._record_query_failure(execution_time, e)
            
            logger.error(f"Falha na query ap√≥s {execution_time:.3f}s: {e}")
            raise
    
    def begin_transaction(self) -> Transaction:
        """Inicia transa√ß√£o"""
        self.last_used = datetime.now()
        return self.session.begin_transaction()
    
    def close(self) -> None:
        """Fecha conex√£o"""
        if self.is_active:
            try:
                self.session.close()
            except Exception as e:
                logger.debug(f"Erro ao fechar sess√£o: {e}")
            finally:
                self.is_active = False
    
    def is_expired(self, max_lifetime: int) -> bool:
        """Verifica se conex√£o expirou"""
        age = (datetime.now() - self.created_at).total_seconds()
        return age > max_lifetime
    
    def is_idle(self, max_idle_time: int) -> bool:
        """Verifica se conex√£o est√° idle h√° muito tempo"""
        idle_time = (datetime.now() - self.last_used).total_seconds()
        return idle_time > max_idle_time


class Neo4jConnectionPool:
    """
    Pool de conex√µes Neo4j thread-safe com circuit breaker
    
    Features:
    - Pool de conex√µes reutiliz√°veis
    - Circuit breaker para falhas
    - M√©tricas detalhadas
    - Health check autom√°tico
    - Cache de resultados
    - Retry logic
    - Connection lifecycle management
    """
    
    _instance = None
    _lock = threading.Lock()
    
    def __new__(cls, config: Optional[Neo4jConfig] = None):
        """Singleton pattern"""
        if cls._instance is None:
            with cls._lock:
                if cls._instance is None:
                    cls._instance = super().__new__(cls)
        return cls._instance
    
    def __init__(self, config: Optional[Neo4jConfig] = None):
        """
        Inicializa pool de conex√µes
        
        Args:
            config: Configura√ß√£o do Neo4j
        """
        if hasattr(self, '_initialized'):
            return
        
        self.config = config or Neo4jConfig()
        self.circuit_breaker = Neo4jCircuitBreaker(CircuitBreakerConfig())
        
        # Pool de conex√µes
        self._pool: queue.Queue[ConnectionWrapper] = queue.Queue()
        self._active_connections: List[ConnectionWrapper] = []
        self._pool_lock = threading.RLock()
        
        # Driver principal
        self._driver: Optional[Driver] = None
        
        # Estat√≠sticas
        self._stats = PoolStats()
        self._start_time = datetime.now()
        
        # Cache para resultados
        cache_config = CacheConfig(
            max_size=1000,
            default_ttl=300,  # 5 minutos
            policy=CachePolicy.LRU_TTL
        )
        self._cache = get_cache('neo4j_queries', cache_config)
        
        # Thread de manuten√ß√£o
        self._maintenance_thread = None
        self._running = False
        
        # Inicializar
        self._initialize()
        self._initialized = True
    
    def _initialize(self) -> None:
        """Inicializa o pool"""
        try:
            logger.info(f"üîó Inicializando Neo4j Connection Pool...")
            logger.info(f"üìç URI: {self.config.uri}")
            logger.info(f"üèõÔ∏è Database: {self.config.database}")
            logger.info(f"üë• Max connections: {self.config.max_connection_pool_size}")
            
            # Criar driver
            self._driver = GraphDatabase.driver(
                self.config.uri,
                auth=(self.config.username, self.config.password),
                max_connection_lifetime=self.config.max_connection_lifetime,
                max_connection_pool_size=self.config.max_connection_pool_size,
                connection_acquisition_timeout=self.config.connection_acquisition_timeout,
                encrypted=self.config.encrypted,
                trust=self.config.trust
            )
            
            # Testar conex√£o
            self._test_connection()
            
            # Iniciar thread de manuten√ß√£o
            self._start_maintenance_thread()
            
            logger.info("‚úÖ Neo4j Connection Pool inicializado com sucesso")
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao inicializar Neo4j pool: {e}")
            raise
    
    def _test_connection(self) -> None:
        """Testa conex√£o inicial"""
        try:
            with self._driver.session(database=self.config.database) as session:
                result = session.run("RETURN 1 as test")
                test_value = result.single()["test"]
                if test_value != 1:
                    raise ValueError("Teste de conex√£o falhou")
            
            logger.debug("‚úÖ Teste de conex√£o Neo4j bem-sucedido")
            
        except Exception as e:
            logger.error(f"‚ùå Teste de conex√£o falhou: {e}")
            raise
    
    @contextmanager
    def get_session(self, database: Optional[str] = None) -> ContextManager[ConnectionWrapper]:
        """
        Context manager para obter sess√£o do pool
        
        Args:
            database: Database espec√≠fico (opcional)
            
        Yields:
            ConnectionWrapper com sess√£o ativa
        """
        connection = None
        try:
            connection = self._acquire_connection(database)
            yield connection
        finally:
            if connection:
                self._release_connection(connection)
    
    def _acquire_connection(self, database: Optional[str] = None) -> ConnectionWrapper:
        """Adquire conex√£o do pool"""
        def acquire():
            with self._pool_lock:
                # Tentar reutilizar conex√£o do pool
                while not self._pool.empty():
                    try:
                        connection = self._pool.get_nowait()
                        if connection.is_active and not connection.is_expired(self.config.max_connection_lifetime):
                            self._active_connections.append(connection)
                            self._stats.active_connections = len(self._active_connections)
                            return connection
                        else:
                            # Conex√£o expirada
                            connection.close()
                    except queue.Empty:
                        break
                
                # Criar nova conex√£o se necess√°rio
                if len(self._active_connections) < self.config.max_connection_pool_size:
                    session = self._driver.session(database=database or self.config.database)
                    connection = ConnectionWrapper(session, self)
                    self._active_connections.append(connection)
                    self._stats.total_connections += 1
                    self._stats.active_connections = len(self._active_connections)
                    return connection
                else:
                    raise ServiceUnavailable("Pool de conex√µes esgotado")
        
        return self.circuit_breaker.call(acquire)
    
    def _release_connection(self, connection: ConnectionWrapper) -> None:
        """Libera conex√£o de volta para o pool"""
        with self._pool_lock:
            if connection in self._active_connections:
                self._active_connections.remove(connection)
            
            if connection.is_active and not connection.is_expired(self.config.max_connection_lifetime):
                # Retornar ao pool
                self._pool.put_nowait(connection)
                self._stats.idle_connections = self._pool.qsize()
            else:
                # Fechar conex√£o expirada
                connection.close()
            
            self._stats.active_connections = len(self._active_connections)
    
    def execute_query(self, query: str, parameters: Optional[Dict] = None, 
                     database: Optional[str] = None, use_cache: bool = True) -> Any:
        """
        Executa query com cache e retry logic
        
        Args:
            query: Query Cypher
            parameters: Par√¢metros da query
            database: Database espec√≠fico
            use_cache: Se deve usar cache
            
        Returns:
            Resultado da query
        """
        # Gerar chave do cache
        cache_key = None
        if use_cache:
            import hashlib
            key_data = f"{query}:{str(parameters)}:{database}"
            cache_key = hashlib.md5(key_data.encode()).hexdigest()
            
            # Verificar cache
            cached_result = self._cache.get(cache_key)
            if cached_result is not None:
                logger.debug(f"Cache HIT para query: {query[:50]}...")
                return cached_result
        
        # Executar query
        def execute():
            with self.get_session(database) as connection:
                result = connection.run(query, parameters)
                # Converter para lista para cache
                data = [dict(record) for record in result]
                
                # Cachear resultado se solicitado
                if use_cache and cache_key:
                    self._cache.set(cache_key, data, ttl=300)
                
                return data
        
        return self.circuit_breaker.call(execute)
    
    def execute_transaction(self, func: Callable, *args, database: Optional[str] = None, **kwargs) -> Any:
        """
        Executa fun√ß√£o em transa√ß√£o
        
        Args:
            func: Fun√ß√£o a executar na transa√ß√£o
            *args: Argumentos posicionais
            database: Database espec√≠fico
            **kwargs: Argumentos nomeados
            
        Returns:
            Resultado da fun√ß√£o
        """
        def execute_tx():
            with self.get_session(database) as connection:
                with connection.begin_transaction() as tx:
                    return func(tx, *args, **kwargs)
        
        return self.circuit_breaker.call(execute_tx)
    
    def health_check(self) -> bool:
        """
        Verifica sa√∫de das conex√µes
        
        Returns:
            True se sistema est√° saud√°vel
        """
        try:
            # Teste simples de conectividade
            result = self.execute_query("RETURN 1 as health_check", use_cache=False)
            is_healthy = result and len(result) > 0 and result[0].get('health_check') == 1
            
            self._stats.last_health_check = datetime.now()
            
            if is_healthy:
                logger.debug("‚úÖ Health check Neo4j passou")
            else:
                logger.warning("‚ö†Ô∏è Health check Neo4j falhou")
            
            return is_healthy
            
        except Exception as e:
            logger.error(f"‚ùå Health check Neo4j falhou: {e}")
            return False
    
    def get_stats(self) -> PoolStats:
        """Retorna estat√≠sticas do pool"""
        with self._pool_lock:
            self._stats.idle_connections = self._pool.qsize()
            self._stats.uptime = datetime.now() - self._start_time
            self._stats.circuit_breaker_state = self.circuit_breaker.state.value
        
        return self._stats
    
    def _record_query_success(self, execution_time: float) -> None:
        """Registra query bem-sucedida"""
        self._stats.total_queries += 1
        self._stats.successful_queries += 1
        
        # Atualizar tempo m√©dio
        total_time = self._stats.avg_query_time * (self._stats.successful_queries - 1)
        self._stats.avg_query_time = (total_time + execution_time) / self._stats.successful_queries
    
    def _record_query_failure(self, execution_time: float, exception: Exception) -> None:
        """Registra query que falhou"""
        self._stats.total_queries += 1
        self._stats.failed_queries += 1
        
        logger.warning(f"Query falhou ap√≥s {execution_time:.3f}s: {exception}")
    
    def _start_maintenance_thread(self) -> None:
        """Inicia thread de manuten√ß√£o"""
        def maintenance_worker():
            while self._running:
                try:
                    self._cleanup_expired_connections()
                    self._cleanup_cache()
                    time.sleep(60)  # Manuten√ß√£o a cada minuto
                except Exception as e:
                    logger.error(f"Erro na manuten√ß√£o do pool: {e}")
                    time.sleep(30)
        
        self._running = True
        self._maintenance_thread = threading.Thread(target=maintenance_worker, daemon=True)
        self._maintenance_thread.start()
        logger.debug("Thread de manuten√ß√£o do pool iniciada")
    
    def _cleanup_expired_connections(self) -> None:
        """Remove conex√µes expiradas"""
        with self._pool_lock:
            # Limpar pool de conex√µes idle
            temp_queue = queue.Queue()
            expired_count = 0
            
            while not self._pool.empty():
                try:
                    connection = self._pool.get_nowait()
                    if connection.is_expired(self.config.max_connection_lifetime):
                        connection.close()
                        expired_count += 1
                    else:
                        temp_queue.put_nowait(connection)
                except queue.Empty:
                    break
            
            # Recolocar conex√µes v√°lidas
            self._pool = temp_queue
            
            # Limpar conex√µes ativas expiradas
            active_expired = []
            for connection in self._active_connections[:]:
                if connection.is_expired(self.config.max_connection_lifetime):
                    active_expired.append(connection)
            
            for connection in active_expired:
                self._active_connections.remove(connection)
                connection.close()
                expired_count += 1
            
            if expired_count > 0:
                logger.debug(f"Removidas {expired_count} conex√µes expiradas")
    
    def _cleanup_cache(self) -> None:
        """Limpa cache de queries"""
        self._cache.cleanup_expired()
    
    def close(self) -> None:
        """Fecha pool e todas as conex√µes"""
        logger.info("üîó Fechando Neo4j Connection Pool...")
        
        self._running = False
        
        # Aguardar thread de manuten√ß√£o
        if self._maintenance_thread and self._maintenance_thread.is_alive():
            self._maintenance_thread.join(timeout=5)
        
        # Fechar todas as conex√µes
        with self._pool_lock:
            while not self._pool.empty():
                try:
                    connection = self._pool.get_nowait()
                    connection.close()
                except queue.Empty:
                    break
            
            for connection in self._active_connections[:]:
                connection.close()
            
            self._active_connections.clear()
        
        # Fechar driver
        if self._driver:
            self._driver.close()
        
        logger.info("‚úÖ Neo4j Connection Pool fechado")


# Inst√¢ncia global do pool
_neo4j_pool: Optional[Neo4jConnectionPool] = None
_pool_lock = threading.Lock()


def get_neo4j_pool(config: Optional[Neo4jConfig] = None) -> Neo4jConnectionPool:
    """
    Obt√©m inst√¢ncia singleton do pool Neo4j
    
    Args:
        config: Configura√ß√£o do Neo4j (opcional)
        
    Returns:
        Inst√¢ncia do pool
    """
    global _neo4j_pool
    
    if _neo4j_pool is None:
        with _pool_lock:
            if _neo4j_pool is None:
                _neo4j_pool = Neo4jConnectionPool(config)
    
    return _neo4j_pool


def execute_query(query: str, parameters: Optional[Dict] = None, 
                 database: Optional[str] = None, use_cache: bool = True) -> Any:
    """
    Fun√ß√£o de conveni√™ncia para executar query
    
    Args:
        query: Query Cypher
        parameters: Par√¢metros da query
        database: Database espec√≠fico
        use_cache: Se deve usar cache
        
    Returns:
        Resultado da query
    """
    pool = get_neo4j_pool()
    return pool.execute_query(query, parameters, database, use_cache)


def execute_transaction(func: Callable, *args, database: Optional[str] = None, **kwargs) -> Any:
    """
    Fun√ß√£o de conveni√™ncia para executar transa√ß√£o
    
    Args:
        func: Fun√ß√£o a executar na transa√ß√£o
        *args: Argumentos posicionais
        database: Database espec√≠fico
        **kwargs: Argumentos nomeados
        
    Returns:
        Resultado da fun√ß√£o
    """
    pool = get_neo4j_pool()
    return pool.execute_transaction(func, *args, database=database, **kwargs)


@contextmanager
def get_session(database: Optional[str] = None) -> ContextManager[ConnectionWrapper]:
    """
    Context manager de conveni√™ncia para sess√£o
    
    Args:
        database: Database espec√≠fico
        
    Yields:
        ConnectionWrapper com sess√£o ativa
    """
    pool = get_neo4j_pool()
    with pool.get_session(database) as session:
        yield session


if __name__ == "__main__":
    # Teste do pool de conex√µes
    print("üîó Testando Neo4j Connection Pool...")
    
    try:
        # Configurar pool
        config = Neo4jConfig()
        pool = get_neo4j_pool(config)
        
        # Testar health check
        is_healthy = pool.health_check()
        print(f"Health check: {'‚úÖ' if is_healthy else '‚ùå'}")
        
        # Testar query simples
        result = execute_query("RETURN 'Hello Neo4j' as message")
        print(f"Query result: {result}")
        
        # Testar com cache
        start_time = time.time()
        result1 = execute_query("RETURN rand() as random_number", use_cache=True)
        time1 = time.time() - start_time
        
        start_time = time.time()
        result2 = execute_query("RETURN rand() as random_number", use_cache=True)
        time2 = time.time() - start_time
        
        print(f"Primeira query: {time1:.3f}s")
        print(f"Segunda query (cache): {time2:.3f}s")
        
        # Mostrar estat√≠sticas
        stats = pool.get_stats()
        print(f"\nEstat√≠sticas do pool:")
        print(f"Total de conex√µes: {stats.total_connections}")
        print(f"Conex√µes ativas: {stats.active_connections}")
        print(f"Conex√µes idle: {stats.idle_connections}")
        print(f"Total de queries: {stats.total_queries}")
        print(f"Taxa de sucesso: {stats.success_rate:.2%}")
        print(f"Tempo m√©dio de query: {stats.avg_query_time:.3f}s")
        print(f"Circuit breaker: {stats.circuit_breaker_state}")
        
        print("\n‚úÖ Neo4j Connection Pool testado com sucesso!")
        
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")
        logger.error(f"Erro no teste do pool: {e}")
    
    finally:
        # Fechar pool
        if _neo4j_pool:
            _neo4j_pool.close()