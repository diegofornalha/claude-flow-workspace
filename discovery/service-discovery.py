#!/usr/bin/env python3
"""
üîç Service Discovery System - Claude-20x REFATORADO
Sistema de descoberta autom√°tica de agentes A2A com:
- Configura√ß√µes centralizadas
- Tratamento robusto de exce√ß√µes
- Logging detalhado
- Retry logic com backoff exponencial
- Fallbacks para servi√ßos indispon√≠veis
- Valida√ß√µes de entrada robustas
- Type hints completos
- Circuit breaker pattern
"""

import os
import json
import asyncio
import aiohttp
import socket
import time
import random
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Optional, Set, Tuple, Union, Any, Callable
from dataclasses import dataclass, asdict
from enum import Enum
import threading
import uvicorn
from fastapi import FastAPI, HTTPException, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
import psutil
import requests
from urllib.parse import urljoin
import logging
from functools import wraps

# Importar configura√ß√µes centralizadas
import sys
from pathlib import Path
sys.path.insert(0, str(Path(__file__).parent.parent))
from config import get_config, Config

# Configurar logging com base nas configura√ß√µes
config = get_config()
logging.basicConfig(
    level=getattr(logging, config.logger.log_level),
    format='%(asctime)s - %(name)s - %(levelname)s - %(funcName)s:%(lineno)d - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler(config.paths.logs_dir / 'service-discovery.log')
    ]
)
logger = logging.getLogger(__name__)


# ========== EXCE√á√ïES PERSONALIZADAS ==========

class ServiceDiscoveryError(Exception):
    """Exce√ß√£o base para erros do Service Discovery"""
    pass


class AgentProbeError(ServiceDiscoveryError):
    """Erro ao fazer probe de um agente"""
    pass


class ConfigurationError(ServiceDiscoveryError):
    """Erro de configura√ß√£o"""
    pass


class NetworkTimeoutError(ServiceDiscoveryError):
    """Erro de timeout de rede"""
    pass


class AgentUnreachableError(ServiceDiscoveryError):
    """Agente n√£o alcan√ß√°vel"""
    pass


# ========== VALIDADORES ==========

class InputValidator:
    """Classe para valida√ß√£o de entradas"""
    
    @staticmethod
    def validate_host(host: str) -> str:
        """Valida host de entrada"""
        if not host or not isinstance(host, str):
            raise ValueError("Host deve ser uma string n√£o vazia")
        
        host = host.strip()
        if not host:
            raise ValueError("Host n√£o pode estar vazio")
        
        # Permitir apenas hosts seguros
        allowed_hosts = ['localhost', '127.0.0.1', '0.0.0.0']
        if host not in allowed_hosts and not host.startswith('192.168.') and not host.startswith('10.'):
            logger.warning(f"Host potencialmente inseguro: {host}")
        
        return host
    
    @staticmethod
    def validate_port(port: Union[int, str]) -> int:
        """Valida porta de entrada"""
        try:
            port_num = int(port)
        except (ValueError, TypeError):
            raise ValueError(f"Porta deve ser um n√∫mero inteiro, recebido: {port}")
        
        if not (1 <= port_num <= 65535):
            raise ValueError(f"Porta deve estar entre 1 e 65535, recebido: {port_num}")
        
        return port_num
    
    @staticmethod
    def validate_url(url: str) -> str:
        """Valida URL de entrada"""
        if not url or not isinstance(url, str):
            raise ValueError("URL deve ser uma string n√£o vazia")
        
        url = url.strip()
        if not url:
            raise ValueError("URL n√£o pode estar vazia")
        
        if not (url.startswith('http://') or url.startswith('https://')):
            raise ValueError(f"URL deve come√ßar com http:// ou https://, recebido: {url}")
        
        return url


# ========== CIRCUIT BREAKER ==========

class CircuitBreakerState(Enum):
    """Estados do Circuit Breaker"""
    CLOSED = "closed"
    OPEN = "open"
    HALF_OPEN = "half_open"


@dataclass
class CircuitBreakerConfig:
    """Configura√ß√£o do Circuit Breaker"""
    failure_threshold: int = 5
    recovery_timeout: int = 60
    expected_exception: tuple = (Exception,)


class CircuitBreaker:
    """Implementa√ß√£o do padr√£o Circuit Breaker para agentes problem√°ticos"""
    
    def __init__(self, config: CircuitBreakerConfig):
        self.config = config
        self.failure_count = 0
        self.last_failure_time: Optional[datetime] = None
        self.state = CircuitBreakerState.CLOSED
    
    def __call__(self, func: Callable) -> Callable:
        """Decorator para aplicar circuit breaker"""
        @wraps(func)
        async def wrapper(*args, **kwargs):
            if self.state == CircuitBreakerState.OPEN:
                if self._should_attempt_reset():
                    self.state = CircuitBreakerState.HALF_OPEN
                    logger.info("Circuit breaker mudou para HALF_OPEN")
                else:
                    raise AgentUnreachableError("Circuit breaker OPEN - agente indispon√≠vel")
            
            try:
                result = await func(*args, **kwargs)
                self._on_success()
                return result
            except self.config.expected_exception as e:
                self._on_failure()
                raise
        
        return wrapper
    
    def _should_attempt_reset(self) -> bool:
        """Verifica se deve tentar resetar o circuit breaker"""
        if self.last_failure_time is None:
            return True
        
        return (datetime.now() - self.last_failure_time).total_seconds() >= self.config.recovery_timeout
    
    def _on_success(self) -> None:
        """Chamado quando opera√ß√£o √© bem-sucedida"""
        self.failure_count = 0
        self.state = CircuitBreakerState.CLOSED
    
    def _on_failure(self) -> None:
        """Chamado quando opera√ß√£o falha"""
        self.failure_count += 1
        self.last_failure_time = datetime.now()
        
        if self.failure_count >= self.config.failure_threshold:
            self.state = CircuitBreakerState.OPEN
            logger.warning(f"Circuit breaker ABERTO - {self.failure_count} falhas consecutivas")


# ========== RETRY LOGIC ==========

async def retry_with_backoff(
    func: Callable,
    max_retries: int = 3,
    base_delay: float = 1.0,
    max_delay: float = 30.0,
    backoff_factor: float = 2.0,
    jitter: bool = True
) -> Any:
    """
    Executa fun√ß√£o com retry e backoff exponencial
    
    Args:
        func: Fun√ß√£o ass√≠ncrona para executar
        max_retries: N√∫mero m√°ximo de tentativas
        base_delay: Delay inicial em segundos
        max_delay: Delay m√°ximo em segundos
        backoff_factor: Fator de multiplica√ß√£o do delay
        jitter: Se deve adicionar varia√ß√£o aleat√≥ria
    
    Returns:
        Resultado da fun√ß√£o
    
    Raises:
        Exception: √öltima exce√ß√£o capturada ap√≥s todas as tentativas
    """
    last_exception = None
    
    for attempt in range(max_retries + 1):
        try:
            logger.debug(f"Tentativa {attempt + 1}/{max_retries + 1}")
            result = await func()
            if attempt > 0:
                logger.info(f"Sucesso na tentativa {attempt + 1}")
            return result
        
        except Exception as e:
            last_exception = e
            
            if attempt == max_retries:
                logger.error(f"Todas as {max_retries + 1} tentativas falharam. √öltima exce√ß√£o: {e}")
                break
            
            # Calcular delay com backoff exponencial
            delay = min(base_delay * (backoff_factor ** attempt), max_delay)
            
            # Adicionar jitter para evitar thundering herd
            if jitter:
                delay *= (0.5 + random.random() * 0.5)
            
            logger.warning(f"Tentativa {attempt + 1} falhou: {e}. Aguardando {delay:.2f}s...")
            await asyncio.sleep(delay)
    
    raise last_exception


class AgentStatus(Enum):
    """Status poss√≠veis dos agentes"""
    ONLINE = "online"
    OFFLINE = "offline"
    STARTING = "starting"
    ERROR = "error"
    UNKNOWN = "unknown"


@dataclass
class AgentInfo:
    """
    Informa√ß√µes completas do agente descoberto
    
    Attributes:
        id: Identificador √∫nico do agente (formato: host:port)
        name: Nome amig√°vel do agente
        type: Tipo do agente (a2a, web, analytics, debug, etc.)
        host: Endere√ßo IP ou hostname do agente
        port: Porta de rede do agente
        url: URL base do agente
        status: Status atual do agente
        last_seen: Timestamp da √∫ltima vez que o agente foi visto online
        capabilities: Lista de capacidades do agente
        metadata: Metadados adicionais do agente
        health_endpoint: URL do endpoint de health check
        card_endpoint: URL do endpoint de agent card
        version: Vers√£o do agente (opcional)
        uptime: Tempo de atividade em segundos (opcional)
        circuit_breaker: Circuit breaker para este agente (opcional)
    """
    id: str
    name: str
    type: str
    host: str
    port: int
    url: str
    status: AgentStatus
    last_seen: datetime
    capabilities: List[str]
    metadata: Dict[str, Any]
    health_endpoint: str
    card_endpoint: str
    version: Optional[str] = None
    uptime: Optional[float] = None
    circuit_breaker: Optional[CircuitBreaker] = None
    
    def __post_init__(self) -> None:
        """Valida√ß√£o e inicializa√ß√£o p√≥s-cria√ß√£o"""
        # Validar campos obrigat√≥rios
        self.host = InputValidator.validate_host(self.host)
        self.port = InputValidator.validate_port(self.port)
        self.url = InputValidator.validate_url(self.url)
        
        # Inicializar circuit breaker se n√£o foi fornecido
        if self.circuit_breaker is None:
            cb_config = CircuitBreakerConfig(
                failure_threshold=3,
                recovery_timeout=30,
                expected_exception=(AgentProbeError, NetworkTimeoutError, AgentUnreachableError)
            )
            self.circuit_breaker = CircuitBreaker(cb_config)
    
    def to_dict(self) -> Dict[str, Any]:
        """
        Converte AgentInfo para dicion√°rio
        
        Returns:
            Dicion√°rio com todas as informa√ß√µes do agente
        """
        try:
            return {
                **asdict(self),
                'status': self.status.value,
                'last_seen': self.last_seen.isoformat(),
                'uptime': self.uptime,
                'circuit_breaker_state': self.circuit_breaker.state.value if self.circuit_breaker else None
            }
        except Exception as e:
            logger.error(f"Erro ao converter AgentInfo para dict: {e}")
            # Fallback com dados m√≠nimos
            return {
                'id': self.id,
                'name': self.name,
                'status': self.status.value,
                'error': str(e)
            }
    
    def is_healthy(self) -> bool:
        """
        Verifica se o agente est√° saud√°vel
        
        Returns:
            True se o agente est√° online e o circuit breaker est√° fechado
        """
        return (
            self.status == AgentStatus.ONLINE and
            (self.circuit_breaker is None or self.circuit_breaker.state == CircuitBreakerState.CLOSED)
        )


class ServiceDiscovery:
    """
    üïµÔ∏è Sistema de Service Discovery robusto e configur√°vel
    
    Funcionalidades implementadas:
    - Descoberta autom√°tica de agentes A2A
    - Health checking cont√≠nuo com circuit breaker
    - Registry centralizado com valida√ß√£o
    - Retry logic com backoff exponencial
    - Fallbacks para servi√ßos indispon√≠veis
    - Logging detalhado para debug
    - Configura√ß√µes centralizadas
    - Tratamento robusto de exce√ß√µes
    """
    
    def __init__(self, config_override: Optional[Config] = None):
        """
        Inicializa o Service Discovery
        
        Args:
            config_override: Configura√ß√£o customizada (opcional)
            
        Raises:
            ConfigurationError: Se configura√ß√µes est√£o inv√°lidas
        """
        try:
            logger.info("üîç Inicializando Service Discovery System...")
            
            # Usar configura√ß√£o fornecida ou carregar a padr√£o
            self.config = config_override or get_config()
            
            # Validar configura√ß√µes
            self._validate_config()
            
            # Inicializar componentes
            self.registry: Dict[str, AgentInfo] = {}
            self.discovery_cache: Dict[str, Any] = {}
            self._last_discovery: Optional[float] = None
            
            # Thread de discovery autom√°tico
            self.running = True
            self.discovery_thread = threading.Thread(
                target=self._discovery_worker, 
                daemon=True,
                name="ServiceDiscoveryWorker"
            )
            
            logger.info(f"üìÅ Project root: {self.config.paths.project_root}")
            logger.info(f"üîç Scan ranges: {self.config.discovery.scan_ranges}")
            logger.info(f"‚è±Ô∏è Scan interval: {self.config.discovery.scan_interval}s")
            logger.info(f"ü§ñ Known agents: {list(self.config.agents.known_agents.keys())}")
            
            # Iniciar thread de discovery
            self.discovery_thread.start()
            logger.info("‚úÖ Service Discovery inicializado com sucesso")
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao inicializar Service Discovery: {e}")
            raise ConfigurationError(f"Falha na inicializa√ß√£o: {e}") from e
    
    def _validate_config(self) -> None:
        """
        Valida as configura√ß√µes do sistema
        
        Raises:
            ConfigurationError: Se alguma configura√ß√£o est√° inv√°lida
        """
        try:
            # Validar paths
            if not self.config.paths.project_root.exists():
                logger.warning(f"‚ö†Ô∏è Project root n√£o existe: {self.config.paths.project_root}")
            
            # Validar configura√ß√µes de discovery
            if self.config.discovery.scan_interval <= 0:
                raise ConfigurationError(f"Scan interval deve ser positivo: {self.config.discovery.scan_interval}")
            
            if self.config.discovery.cache_ttl <= 0:
                raise ConfigurationError(f"Cache TTL deve ser positivo: {self.config.discovery.cache_ttl}")
            
            if not self.config.discovery.scan_ranges:
                raise ConfigurationError("Scan ranges n√£o pode estar vazio")
            
            # Validar agentes conhecidos
            for agent_name, agent_config in self.config.agents.known_agents.items():
                if not agent_config.get('ports'):
                    raise ConfigurationError(f"Agent {agent_name} deve ter portas definidas")
                
                for port in agent_config['ports']:
                    InputValidator.validate_port(port)
            
            logger.debug("‚úÖ Configura√ß√µes validadas com sucesso")
            
        except Exception as e:
            logger.error(f"‚ùå Erro na valida√ß√£o das configura√ß√µes: {e}")
            raise ConfigurationError(f"Configura√ß√µes inv√°lidas: {e}") from e
    
    async def discover_agents(self, force_scan: bool = False) -> List[AgentInfo]:
        """
        Descobre todos os agentes ativos no sistema
        
        Args:
            force_scan: Se True, for√ßa nova descoberta ignorando cache
            
        Returns:
            Lista de agentes descobertos
            
        Raises:
            ServiceDiscoveryError: Se descoberta falhar completamente
        """
        try:
            logger.info("üîç Iniciando descoberta de agentes...")
            start_time = time.time()
            
            # Verificar cache se n√£o √© force scan
            if not force_scan and self._is_cache_valid():
                cached_agents = list(self.registry.values())
                logger.debug(f"üìã Usando cache: {len(cached_agents)} agentes")
                return cached_agents
            
            discovered: List[AgentInfo] = []
            
            # 1. Descoberta por agentes conhecidos (alta prioridade)
            try:
                known_agents = await self._discover_known_agents()
                discovered.extend(known_agents)
                logger.info(f"üéØ Descobertos {len(known_agents)} agentes conhecidos")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erro na descoberta de agentes conhecidos: {e}")
            
            # 2. Descoberta por scan de rede (m√©dia prioridade)
            try:
                scanned_agents = await self._discover_by_scan()
                discovered.extend(scanned_agents)
                logger.info(f"üîç Descobertos {len(scanned_agents)} agentes por scan")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erro no scan de rede: {e}")
            
            # 3. Descoberta por arquivos de configura√ß√£o (baixa prioridade)
            try:
                config_agents = await self._discover_from_configs()
                discovered.extend(config_agents)
                logger.info(f"üìã Descobertos {len(config_agents)} agentes por config")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erro na descoberta por config: {e}")
            
            # Deduplizar agentes
            unique_agents = self._deduplicate_agents(discovered)
            
            # Atualizar registry com valida√ß√£o
            await self._update_registry(unique_agents)
            
            # Limpar agentes offline
            await self._cleanup_offline_agents()
            
            # Atualizar cache
            self._last_discovery = time.time()
            
            discovery_time = time.time() - start_time
            logger.info(f"‚úÖ Descoberta conclu√≠da: {len(unique_agents)} agentes √∫nicos em {discovery_time:.2f}s")
            
            return unique_agents
            
        except Exception as e:
            logger.error(f"‚ùå Erro na descoberta de agentes: {e}")
            # Fallback: retornar agentes conhecidos do registry
            fallback_agents = self._get_fallback_agents()
            logger.warning(f"üÜò Usando fallback: {len(fallback_agents)} agentes")
            return fallback_agents
    
    def _get_fallback_agents(self) -> List[AgentInfo]:
        """
        Retorna agentes conhecidos como fallback
        
        Returns:
            Lista de agentes em fallback
        """
        try:
            # Retornar agentes online do registry
            fallback = [agent for agent in self.registry.values() 
                       if agent.status != AgentStatus.OFFLINE]
            
            if not fallback:
                # Se n√£o h√° agentes no registry, criar agentes mock dos conhecidos
                for agent_name, agent_config in self.config.agents.known_agents.items():
                    for port in agent_config['ports']:
                        try:
                            fallback_agent = AgentInfo(
                                id=f"localhost:{port}",
                                name=agent_name,
                                type=agent_config['type'],
                                host="localhost",
                                port=port,
                                url=f"http://localhost:{port}",
                                status=AgentStatus.UNKNOWN,
                                last_seen=datetime.now(),
                                capabilities=[],
                                metadata={"fallback": True},
                                health_endpoint=f"http://localhost:{port}/health",
                                card_endpoint=f"http://localhost:{port}/agent/card"
                            )
                            fallback.append(fallback_agent)
                        except Exception as e:
                            logger.debug(f"Erro ao criar fallback para {agent_name}: {e}")
            
            return fallback
            
        except Exception as e:
            logger.error(f"Erro ao gerar fallback agents: {e}")
            return []
    
    def _deduplicate_agents(self, agents: List[AgentInfo]) -> List[AgentInfo]:
        """
        Remove agentes duplicados baseado no ID
        
        Args:
            agents: Lista de agentes para deduplificar
            
        Returns:
            Lista de agentes √∫nicos
        """
        seen_ids = set()
        unique_agents = []
        
        for agent in agents:
            if agent.id not in seen_ids:
                unique_agents.append(agent)
                seen_ids.add(agent.id)
            else:
                logger.debug(f"Agente duplicado removido: {agent.id}")
        
        return unique_agents
    
    async def _update_registry(self, agents: List[AgentInfo]) -> None:
        """
        Atualiza o registry com novos agentes
        
        Args:
            agents: Lista de agentes para atualizar
        """
        try:
            for agent in agents:
                # Validar agente antes de adicionar
                if self._validate_agent(agent):
                    self.registry[agent.id] = agent
                    logger.debug(f"Agente adicionado ao registry: {agent.id}")
                else:
                    logger.warning(f"Agente inv√°lido n√£o adicionado: {agent.id}")
        except Exception as e:
            logger.error(f"Erro ao atualizar registry: {e}")
    
    def _validate_agent(self, agent: AgentInfo) -> bool:
        """
        Valida um agente antes de adicionar ao registry
        
        Args:
            agent: Agente para validar
            
        Returns:
            True se agente √© v√°lido
        """
        try:
            # Valida√ß√µes b√°sicas
            if not agent.id or not agent.name or not agent.host:
                return False
            
            if not (1 <= agent.port <= 65535):
                return False
            
            if not agent.url.startswith(('http://', 'https://')):
                return False
            
            return True
            
        except Exception as e:
            logger.debug(f"Erro na valida√ß√£o do agente: {e}")
            return False
    
    def _is_cache_valid(self) -> bool:
        """
        Verifica se cache ainda √© v√°lido
        
        Returns:
            True se cache √© v√°lido
        """
        if self._last_discovery is None:
            return False
        
        cache_age = time.time() - self._last_discovery
        return cache_age < self.config.discovery.cache_ttl
    
    async def _discover_known_agents(self) -> List[AgentInfo]:
        """
        Descobre agentes conhecidos definidos na configura√ß√£o
        
        Returns:
            Lista de agentes conhecidos descobertos
        """
        discovered = []
        
        for agent_name, agent_config in self.config.agents.known_agents.items():
            for port in agent_config["ports"]:
                try:
                    # Criar fun√ß√£o para retry
                    async def probe_known_agent():
                        return await self._probe_agent("localhost", port, agent_name, agent_config["type"])
                    
                    # Usar retry com backoff
                    agent = await retry_with_backoff(
                        probe_known_agent,
                        max_retries=2,
                        base_delay=0.5
                    )
                    
                    if agent:
                        discovered.append(agent)
                        logger.debug(f"‚úÖ Agente conhecido descoberto: {agent_name}:{port}")
                    
                except Exception as e:
                    logger.debug(f"‚ùå Falha ao probar agente conhecido {agent_name}:{port}: {e}")
                    # Continuar com pr√≥ximo agente
                    continue
        
        return discovered
    
    async def _discover_by_scan(self) -> List[AgentInfo]:
        """
        Descobre agentes fazendo scan das faixas de portas configuradas
        
        Returns:
            Lista de agentes descobertos por scan
        """
        scan_tasks = []
        
        # Criar tasks de scan para todas as combina√ß√µes host:porta
        for host, port_range in self.config.discovery.scan_ranges:
            try:
                validated_host = InputValidator.validate_host(host)
                
                if isinstance(port_range, range):
                    for port in port_range:
                        scan_tasks.append(self._create_scan_task(validated_host, port))
                else:
                    for port in port_range:
                        scan_tasks.append(self._create_scan_task(validated_host, port))
                        
            except ValueError as e:
                logger.warning(f"‚ö†Ô∏è Host inv√°lido no scan: {host} - {e}")
                continue
        
        # Executar scans em paralelo com sem√°foro para controlar concorr√™ncia
        semaphore = asyncio.Semaphore(self.config.discovery.max_concurrent)
        
        async def limited_scan(task):
            async with semaphore:
                return await task
        
        logger.debug(f"üîç Executando {len(scan_tasks)} scans em paralelo...")
        results = await asyncio.gather(
            *[limited_scan(task) for task in scan_tasks], 
            return_exceptions=True
        )
        
        # Filtrar resultados v√°lidos
        discovered = []
        for result in results:
            if isinstance(result, AgentInfo):
                discovered.append(result)
            elif isinstance(result, Exception):
                logger.debug(f"Scan falhou: {result}")
        
        return discovered
    
    async def _create_scan_task(self, host: str, port: int) -> Optional[AgentInfo]:
        """
        Cria task de scan para um host:porta espec√≠fico
        
        Args:
            host: Host para scan
            port: Porta para scan
            
        Returns:
            AgentInfo se agente encontrado, None caso contr√°rio
        """
        try:
            # Usar retry apenas para opera√ß√µes cr√≠ticas
            async def scan_single_port():
                return await self._probe_agent(host, port)
            
            return await retry_with_backoff(
                scan_single_port,
                max_retries=1,  # Scan deve ser r√°pido
                base_delay=0.1
            )
            
        except Exception:
            # Scan failures s√£o esperados - n√£o logar como erro
            return None
    
    async def _probe_agent(
        self, 
        host: str, 
        port: int, 
        expected_name: Optional[str] = None, 
        expected_type: Optional[str] = None
    ) -> Optional[AgentInfo]:
        """
        Testa se h√° um agente em host:port espec√≠fico com valida√ß√£o robusta
        
        Args:
            host: Host para testar
            port: Porta para testar
            expected_name: Nome esperado do agente (opcional)
            expected_type: Tipo esperado do agente (opcional)
            
        Returns:
            AgentInfo se agente encontrado, None caso contr√°rio
            
        Raises:
            AgentProbeError: Se houver erro cr√≠tico no probe
        """
        try:
            # Validar entradas
            validated_host = InputValidator.validate_host(host)
            validated_port = InputValidator.validate_port(port)
            
            logger.debug(f"üîé Probando agente em {validated_host}:{validated_port}")
            
            # Verificar se porta est√° aberta primeiro (mais r√°pido)
            if not await self._is_port_open_async(validated_host, validated_port):
                logger.debug(f"‚ùå Porta {validated_host}:{validated_port} n√£o est√° aberta")
                return None
            
            base_url = f"http://{validated_host}:{validated_port}"
            
            # Tentar endpoints A2A primeiro (agentes especializados)
            try:
                agent_info = await self._probe_a2a_agent(base_url, expected_name, expected_type)
                if agent_info:
                    logger.debug(f"‚úÖ Agente A2A encontrado: {agent_info.name}")
                    return agent_info
            except NetworkTimeoutError:
                logger.debug(f"‚è∞ Timeout no probe A2A para {base_url}")
            except AgentProbeError as e:
                logger.debug(f"‚ùå Erro no probe A2A para {base_url}: {e}")
            
            # Tentar endpoints web como fallback
            try:
                agent_info = await self._probe_web_service(base_url, expected_name, expected_type)
                if agent_info:
                    logger.debug(f"‚úÖ Servi√ßo web encontrado: {agent_info.name}")
                    return agent_info
            except NetworkTimeoutError:
                logger.debug(f"‚è∞ Timeout no probe web para {base_url}")
            except AgentProbeError as e:
                logger.debug(f"‚ùå Erro no probe web para {base_url}: {e}")
            
            logger.debug(f"‚ùå Nenhum agente encontrado em {validated_host}:{validated_port}")
            return None
            
        except (ValueError, ConfigurationError) as e:
            logger.warning(f"‚ö†Ô∏è Erro de valida√ß√£o ao probar {host}:{port}: {e}")
            return None
        except Exception as e:
            logger.debug(f"‚ùå Erro inesperado ao probar {host}:{port}: {e}")
            # Para scan r√°pido, n√£o propagar erro
            return None
    
    async def _is_port_open_async(self, host: str, port: int, timeout: float = 1.0) -> bool:
        """
        Verifica se porta est√° aberta de forma ass√≠ncrona
        
        Args:
            host: Host para testar
            port: Porta para testar
            timeout: Timeout em segundos
            
        Returns:
            True se porta est√° aberta
        """
        try:
            future = asyncio.open_connection(host, port)
            reader, writer = await asyncio.wait_for(future, timeout=timeout)
            writer.close()
            await writer.wait_closed()
            return True
        except Exception:
            return False
    
    async def _probe_a2a_agent(
        self, 
        base_url: str, 
        expected_name: Optional[str] = None,
        expected_type: Optional[str] = None
    ) -> Optional[AgentInfo]:
        """
        Verifica se √© um agente A2A v√°lido testando endpoints espec√≠ficos
        
        Args:
            base_url: URL base do agente
            expected_name: Nome esperado (opcional)
            expected_type: Tipo esperado (opcional)
            
        Returns:
            AgentInfo se agente A2A v√°lido encontrado
            
        Raises:
            AgentProbeError: Se houver erro cr√≠tico
            NetworkTimeoutError: Se timeout ocorrer
        """
        try:
            # Validar URL
            validated_url = InputValidator.validate_url(base_url)
            
            # Timeout configur√°vel baseado nas configura√ß√µes
            timeout_seconds = self.config.performance.request_timeout / 1000  # ms para s
            timeout = aiohttp.ClientTimeout(total=timeout_seconds)
            
            async with aiohttp.ClientSession(timeout=timeout) as session:
                # Endpoints A2A padr√£o (em ordem de prioridade)
                card_endpoints = [
                    "/agent/card",
                    "/.well-known/agent.json", 
                    "/agent",
                    "/a2a/info",
                    "/api/agent"
                ]
                
                for endpoint in card_endpoints:
                    try:
                        endpoint_url = urljoin(validated_url, endpoint)
                        logger.debug(f"üîç Testando endpoint A2A: {endpoint_url}")
                        
                        async with session.get(endpoint_url) as response:
                            if response.status == 200:
                                try:
                                    card_data = await response.json()
                                    logger.debug(f"‚úÖ Agent card encontrado em {endpoint}")
                                    return self._create_agent_from_card(
                                        validated_url, card_data, expected_name, expected_type
                                    )
                                except json.JSONDecodeError as e:
                                    logger.debug(f"‚ùå JSON inv√°lido em {endpoint}: {e}")
                                    continue
                            elif response.status == 404:
                                logger.debug(f"‚ùå Endpoint {endpoint} n√£o encontrado")
                                continue
                            else:
                                logger.debug(f"‚ùå Status {response.status} em {endpoint}")
                                continue
                                
                    except asyncio.TimeoutError:
                        logger.debug(f"‚è∞ Timeout no endpoint {endpoint}")
                        raise NetworkTimeoutError(f"Timeout ao acessar {endpoint}")
                    except aiohttp.ClientError as e:
                        logger.debug(f"‚ùå Erro de cliente em {endpoint}: {e}")
                        continue
                    except Exception as e:
                        logger.debug(f"‚ùå Erro inesperado em {endpoint}: {e}")
                        continue
                        
        except NetworkTimeoutError:
            raise  # Re-propagar timeout
        except Exception as e:
            logger.debug(f"‚ùå Erro geral no probe A2A {base_url}: {e}")
            raise AgentProbeError(f"Falha ao probar agente A2A: {e}") from e
        
        return None
    
    async def _probe_web_service(
        self, 
        base_url: str,
        expected_name: Optional[str] = None,
        expected_type: Optional[str] = None
    ) -> Optional[AgentInfo]:
        """
        Verifica se √© um servi√ßo web v√°lido
        
        Args:
            base_url: URL base do servi√ßo
            expected_name: Nome esperado (opcional)
            expected_type: Tipo esperado (opcional)
            
        Returns:
            AgentInfo se servi√ßo web v√°lido encontrado
            
        Raises:
            AgentProbeError: Se houver erro cr√≠tico
            NetworkTimeoutError: Se timeout ocorrer
        """
        try:
            validated_url = InputValidator.validate_url(base_url)
            
            timeout_seconds = self.config.performance.request_timeout / 1000
            timeout = aiohttp.ClientTimeout(total=timeout_seconds)
            
            async with aiohttp.ClientSession(timeout=timeout) as session:
                # Endpoints web comuns
                health_endpoints = ["/health", "/status", "/ping", "/api/health", "/"]
                
                for endpoint in health_endpoints:
                    try:
                        endpoint_url = urljoin(validated_url, endpoint)
                        logger.debug(f"üåê Testando endpoint web: {endpoint_url}")
                        
                        async with session.get(endpoint_url) as response:
                            if 200 <= response.status < 400:
                                content = await response.text()
                                logger.debug(f"‚úÖ Servi√ßo web encontrado em {endpoint}")
                                return self._create_web_service_info(
                                    validated_url, content, expected_name, expected_type
                                )
                    except asyncio.TimeoutError:
                        logger.debug(f"‚è∞ Timeout no endpoint {endpoint}")
                        raise NetworkTimeoutError(f"Timeout ao acessar {endpoint}")
                    except aiohttp.ClientError as e:
                        logger.debug(f"‚ùå Erro de cliente em {endpoint}: {e}")
                        continue
                    except Exception as e:
                        logger.debug(f"‚ùå Erro inesperado em {endpoint}: {e}")
                        continue
                        
        except NetworkTimeoutError:
            raise
        except Exception as e:
            logger.debug(f"‚ùå Erro geral no probe web {base_url}: {e}")
            raise AgentProbeError(f"Falha ao probar servi√ßo web: {e}") from e
        
        return None
    
    def _create_agent_from_card(
        self, 
        base_url: str, 
        card_data: Dict[str, Any],
        expected_name: Optional[str] = None,
        expected_type: Optional[str] = None
    ) -> AgentInfo:
        """
        Cria AgentInfo a partir de agent card A2A
        
        Args:
            base_url: URL base do agente
            card_data: Dados do agent card
            expected_name: Nome esperado (opcional)
            expected_type: Tipo esperado (opcional)
            
        Returns:
            AgentInfo criado a partir do card
        """
        try:
            host, port = self._parse_url(base_url)
            agent_id = f"{host}:{port}"
            
            return AgentInfo(
                id=agent_id,
                name=card_data.get('name', expected_name or f"agent-{port}"),
                type=expected_type or card_data.get('type', 'a2a'),
                host=host,
                port=port,
                url=base_url,
                status=AgentStatus.ONLINE,
                last_seen=datetime.now(),
                capabilities=card_data.get('capabilities', []),
                metadata=card_data,
                health_endpoint=urljoin(base_url, "/health"),
                card_endpoint=urljoin(base_url, "/agent/card"),
                version=card_data.get('version')
            )
        except Exception as e:
            logger.error(f"Erro ao criar agente a partir do card: {e}")
            raise AgentProbeError(f"Falha ao criar agente do card: {e}") from e
    
    def _create_web_service_info(
        self, 
        base_url: str, 
        content: str,
        expected_name: Optional[str] = None,
        expected_type: Optional[str] = None
    ) -> AgentInfo:
        """
        Cria AgentInfo para servi√ßo web
        
        Args:
            base_url: URL base do servi√ßo
            content: Conte√∫do da resposta
            expected_name: Nome esperado (opcional)
            expected_type: Tipo esperado (opcional)
            
        Returns:
            AgentInfo para o servi√ßo web
        """
        try:
            host, port = self._parse_url(base_url)
            agent_id = f"{host}:{port}"
            
            # Tentar extrair informa√ß√µes do conte√∫do
            service_name = expected_name or self._detect_service_name(content, port)
            service_type = expected_type or self._detect_service_type(content, port)
            
            return AgentInfo(
                id=agent_id,
                name=service_name,
                type=service_type,
                host=host,
                port=port,
                url=base_url,
                status=AgentStatus.ONLINE,
                last_seen=datetime.now(),
                capabilities=self._detect_capabilities(content),
                metadata={"content_preview": content[:200], "web_service": True},
                health_endpoint=urljoin(base_url, "/health"),
                card_endpoint=urljoin(base_url, "/"),
            )
        except Exception as e:
            logger.error(f"Erro ao criar info do servi√ßo web: {e}")
            raise AgentProbeError(f"Falha ao criar info do servi√ßo web: {e}") from e
    
    def _detect_service_name(self, content: str, port: int) -> str:
        """
        Detecta nome do servi√ßo baseado no conte√∫do
        
        Args:
            content: Conte√∫do da resposta
            port: Porta do servi√ßo
            
        Returns:
            Nome detectado do servi√ßo
        """
        content_lower = content.lower()
        
        # Padr√µes conhecidos
        name_patterns = {
            "a2a inspector": ["a2a inspector", "inspector"],
            "Analytics Service": ["analytics", "metrics", "monitoring"],
            "Claude Service": ["claude", "anthropic"],
            "Web UI": ["ui", "interface", "dashboard"],
            "API Gateway": ["gateway", "api"],
            "Health Check": ["health", "status"]
        }
        
        for service_name, keywords in name_patterns.items():
            if any(keyword in content_lower for keyword in keywords):
                return service_name
        
        # Fallback baseado na porta
        port_names = {
            12000: "Main UI",
            5000: "Analytics",
            5001: "A2A Inspector",
            9999: "HelloWorld Agent",
            3002: "Marvin Agent",
            3003: "Gemini Agent"
        }
        
        return port_names.get(port, f"Service-{port}")
    
    def _detect_service_type(self, content: str, port: int) -> str:
        """
        Detecta tipo do servi√ßo
        
        Args:
            content: Conte√∫do da resposta
            port: Porta do servi√ßo
            
        Returns:
            Tipo detectado do servi√ßo
        """
        content_lower = content.lower()
        
        # Padr√µes de tipo
        type_patterns = {
            "debug": ["inspector", "debug", "console"],
            "analytics": ["analytics", "metrics", "monitoring"],
            "api": ["api", "rest", "graphql"],
            "web": ["html", "css", "javascript", "react", "vue"],
            "a2a": ["agent", "a2a", "autonomous"]
        }
        
        for service_type, keywords in type_patterns.items():
            if any(keyword in content_lower for keyword in keywords):
                return service_type
        
        # Fallback baseado na porta
        if port == 12000:
            return "web"
        elif port in [5000]:
            return "analytics"
        elif port in [5001]:
            return "debug"
        elif port in [9999, 3002, 3003]:
            return "a2a"
        
        return "service"
    
    def _detect_capabilities(self, content: str) -> List[str]:
        """
        Detecta capacidades do servi√ßo
        
        Args:
            content: Conte√∫do da resposta
            
        Returns:
            Lista de capacidades detectadas
        """
        capabilities = []
        content_lower = content.lower()
        
        capability_keywords = {
            "rest": ["api", "rest", "endpoint"],
            "websocket": ["websocket", "ws", "socket"],
            "debug": ["debug", "inspector", "console"],
            "analytics": ["analytics", "metrics", "monitoring"],
            "ui": ["ui", "interface", "dashboard"],
            "chat": ["chat", "conversation", "message"],
            "health": ["health", "status", "ping"],
            "auth": ["auth", "login", "token"],
            "database": ["database", "db", "storage"]
        }
        
        for capability, keywords in capability_keywords.items():
            if any(keyword in content_lower for keyword in keywords):
                capabilities.append(capability)
        
        return capabilities if capabilities else ["unknown"]
    
    def _parse_url(self, url: str) -> Tuple[str, int]:
        """
        Extrai host e porta da URL
        
        Args:
            url: URL para parsear
            
        Returns:
            Tuple (host, port)
        """
        try:
            # Remover protocolo
            if "://" in url:
                url = url.split("://")[1]
            
            # Separar host e porta
            if ":" in url:
                host, port_str = url.split(":")
                # Remover path se existir
                if "/" in port_str:
                    port_str = port_str.split("/")[0]
                return host, int(port_str)
            else:
                return url, 80
        except Exception as e:
            logger.error(f"Erro ao parsear URL {url}: {e}")
            return "localhost", 80
    
    async def _discover_from_configs(self) -> List[AgentInfo]:
        """
        Descobre agentes atrav√©s de arquivos de configura√ß√£o
        
        Returns:
            Lista de agentes descobertos por config
        """
        agents = []
        
        try:
            # Buscar por arquivos a2a-config.json
            config_files = list(self.config.paths.project_root.rglob("a2a-config.json"))
            
            for config_file in config_files:
                try:
                    with open(config_file, 'r') as f:
                        config_data = json.load(f)
                    
                    # Extrair informa√ß√µes do config
                    agent_info = self._create_agent_from_config(config_data, config_file)
                    if agent_info:
                        agents.append(agent_info)
                        logger.debug(f"Agente descoberto por config: {config_file}")
                        
                except Exception as e:
                    logger.debug(f"Erro ao ler config {config_file}: {e}")
        
        except Exception as e:
            logger.warning(f"Erro na descoberta por configs: {e}")
        
        return agents
    
    def _create_agent_from_config(
        self, 
        config_data: Dict[str, Any], 
        config_file: Path
    ) -> Optional[AgentInfo]:
        """
        Cria AgentInfo a partir de configura√ß√£o
        
        Args:
            config_data: Dados da configura√ß√£o
            config_file: Caminho do arquivo de config
            
        Returns:
            AgentInfo se criado com sucesso
        """
        try:
            # Tentar descobrir porta e host do config
            host = config_data.get('host', 'localhost')
            port = config_data.get('port')
            
            if not port:
                # Tentar extrair do diret√≥rio
                parent_dir = config_file.parent.name
                # Mapear diret√≥rios conhecidos para portas
                dir_port_map = {
                    "helloworld": 9999,
                    "marvin": 3002,
                    "gemini": 3003
                }
                port = dir_port_map.get(parent_dir)
                
                if not port:
                    logger.debug(f"Porta n√£o encontrada para {parent_dir}")
                    return None
            
            base_url = f"http://{host}:{port}"
            
            return AgentInfo(
                id=f"{host}:{port}",
                name=config_data.get('name', config_file.parent.name),
                type=config_data.get('type', 'a2a'),
                host=host,
                port=port,
                url=base_url,
                status=AgentStatus.UNKNOWN,  # Verificar depois
                last_seen=datetime.now(),
                capabilities=config_data.get('capabilities', []),
                metadata={**config_data, "config_file": str(config_file)},
                health_endpoint=urljoin(base_url, "/health"),
                card_endpoint=urljoin(base_url, "/agent/card"),
                version=config_data.get('version')
            )
            
        except Exception as e:
            logger.debug(f"Erro ao criar agent do config: {e}")
            return None
    
    async def health_check_agent(self, agent_id: str) -> bool:
        """
        Verifica sa√∫de de agente espec√≠fico com circuit breaker
        
        Args:
            agent_id: ID do agente para verificar
            
        Returns:
            True se agente est√° saud√°vel
        """
        if agent_id not in self.registry:
            logger.warning(f"Agente {agent_id} n√£o encontrado no registry")
            return False
        
        agent = self.registry[agent_id]
        
        try:
            # Usar circuit breaker se dispon√≠vel
            if agent.circuit_breaker:
                @agent.circuit_breaker
                async def check_health():
                    return await self._perform_health_check(agent)
                
                try:
                    return await check_health()
                except AgentUnreachableError:
                    logger.warning(f"Circuit breaker aberto para {agent_id}")
                    agent.status = AgentStatus.OFFLINE
                    return False
            else:
                return await self._perform_health_check(agent)
                
        except Exception as e:
            logger.error(f"Erro no health check de {agent_id}: {e}")
            agent.status = AgentStatus.ERROR
            return False
    
    async def _perform_health_check(self, agent: AgentInfo) -> bool:
        """
        Executa health check real no agente
        
        Args:
            agent: Agente para verificar
            
        Returns:
            True se agente est√° saud√°vel
            
        Raises:
            NetworkTimeoutError: Se timeout ocorrer
            AgentProbeError: Se houver erro no health check
        """
        try:
            timeout_seconds = self.config.performance.request_timeout / 1000
            timeout = aiohttp.ClientTimeout(total=timeout_seconds)
            
            async with aiohttp.ClientSession(timeout=timeout) as session:
                async with session.get(agent.health_endpoint) as response:
                    if response.status == 200:
                        agent.status = AgentStatus.ONLINE
                        agent.last_seen = datetime.now()
                        logger.debug(f"‚úÖ Health check OK para {agent.id}")
                        return True
                    else:
                        agent.status = AgentStatus.ERROR
                        logger.debug(f"‚ùå Health check falhou para {agent.id}: status {response.status}")
                        return False
                        
        except asyncio.TimeoutError:
            logger.debug(f"‚è∞ Timeout no health check de {agent.id}")
            agent.status = AgentStatus.OFFLINE
            raise NetworkTimeoutError(f"Timeout no health check de {agent.id}")
        except aiohttp.ClientError as e:
            logger.debug(f"‚ùå Erro de rede no health check de {agent.id}: {e}")
            agent.status = AgentStatus.OFFLINE
            raise AgentProbeError(f"Erro de rede: {e}") from e
        except Exception as e:
            logger.error(f"‚ùå Erro inesperado no health check de {agent.id}: {e}")
            agent.status = AgentStatus.ERROR
            raise AgentProbeError(f"Erro inesperado: {e}") from e
    
    async def _cleanup_offline_agents(self) -> None:
        """
        Remove agentes offline h√° muito tempo
        """
        try:
            cutoff_time = datetime.now() - timedelta(minutes=5)
            offline_agents = []
            
            for agent_id, agent in self.registry.items():
                if agent.last_seen < cutoff_time and agent.status == AgentStatus.OFFLINE:
                    offline_agents.append(agent_id)
            
            for agent_id in offline_agents:
                del self.registry[agent_id]
                logger.info(f"üóëÔ∏è Removido agente offline: {agent_id}")
                
        except Exception as e:
            logger.error(f"Erro na limpeza de agentes offline: {e}")
    
    def _discovery_worker(self) -> None:
        """
        Worker thread para descoberta cont√≠nua
        """
        logger.info("üîÑ Iniciando worker de descoberta cont√≠nua")
        
        while self.running:
            try:
                # Executar descoberta
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                loop.run_until_complete(self.discover_agents())
                loop.close()
                
                # Aguardar pr√≥ximo ciclo
                time.sleep(self.config.discovery.scan_interval)
                
            except Exception as e:
                logger.error(f"Erro no discovery worker: {e}")
                time.sleep(10)  # Aguardar antes de tentar novamente
    
    def get_agents_by_type(self, agent_type: str) -> List[AgentInfo]:
        """
        Retorna agentes de um tipo espec√≠fico
        
        Args:
            agent_type: Tipo dos agentes a buscar
            
        Returns:
            Lista de agentes do tipo especificado
        """
        try:
            return [agent for agent in self.registry.values() if agent.type == agent_type]
        except Exception as e:
            logger.error(f"Erro ao buscar agentes por tipo {agent_type}: {e}")
            return []
    
    def get_healthy_agents(self) -> List[AgentInfo]:
        """
        Retorna apenas agentes saud√°veis
        
        Returns:
            Lista de agentes saud√°veis
        """
        try:
            return [agent for agent in self.registry.values() if agent.is_healthy()]
        except Exception as e:
            logger.error(f"Erro ao buscar agentes saud√°veis: {e}")
            return []
    
    def get_agent_stats(self) -> Dict[str, Any]:
        """
        Retorna estat√≠sticas dos agentes
        
        Returns:
            Dicion√°rio com estat√≠sticas
        """
        try:
            agents = list(self.registry.values())
            stats = {
                "total_agents": len(agents),
                "by_status": {},
                "by_type": {},
                "healthy_count": len(self.get_healthy_agents()),
                "discovery_cache_valid": self._is_cache_valid(),
                "last_discovery": self._last_discovery
            }
            
            for agent in agents:
                # Por status
                status = agent.status.value
                stats["by_status"][status] = stats["by_status"].get(status, 0) + 1
                
                # Por tipo
                agent_type = agent.type
                stats["by_type"][agent_type] = stats["by_type"].get(agent_type, 0) + 1
            
            return stats
            
        except Exception as e:
            logger.error(f"Erro ao gerar estat√≠sticas: {e}")
            return {"error": str(e)}
    
    def stop(self) -> None:
        """
        Para o sistema de descoberta graciosamente
        """
        try:
            logger.info("üõë Parando Service Discovery...")
            self.running = False
            
            if self.discovery_thread.is_alive():
                self.discovery_thread.join(timeout=5)
                
            logger.info("‚úÖ Service Discovery parado com sucesso")
            
        except Exception as e:
            logger.error(f"Erro ao parar Service Discovery: {e}")


# üåê API FastAPI para Service Discovery
def create_discovery_api(discovery_service: ServiceDiscovery) -> FastAPI:
    """
    Cria API FastAPI para service discovery com tratamento robusto de erros
    
    Args:
        discovery_service: Inst√¢ncia do ServiceDiscovery
        
    Returns:
        Aplica√ß√£o FastAPI configurada
    """
    
    app = FastAPI(
        title="Service Discovery API",
        version="2.0.0",
        description="API robusta para descoberta de agentes A2A"
    )
    
    app.add_middleware(
        CORSMiddleware,
        allow_origins=["*"],
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )
    
    @app.get("/agents")
    async def list_agents(
        agent_type: Optional[str] = None, 
        healthy_only: bool = False
    ):
        """Lista todos os agentes descobertos com filtros opcionais"""
        try:
            agents = list(discovery_service.registry.values())
            
            if agent_type:
                agents = [a for a in agents if a.type == agent_type]
            
            if healthy_only:
                agents = [a for a in agents if a.is_healthy()]
            
            return {
                "success": True,
                "agents": [agent.to_dict() for agent in agents],
                "count": len(agents),
                "timestamp": datetime.now().isoformat()
            }
        except Exception as e:
            logger.error(f"Erro ao listar agentes: {e}")
            raise HTTPException(status_code=500, detail=f"Erro interno: {str(e)}")
    
    @app.get("/agents/{agent_id}")
    async def get_agent(agent_id: str):
        """Obt√©m informa√ß√µes detalhadas de agente espec√≠fico"""
        try:
            if agent_id not in discovery_service.registry:
                raise HTTPException(status_code=404, detail=f"Agente {agent_id} n√£o encontrado")
            
            agent = discovery_service.registry[agent_id]
            return {
                "success": True,
                "agent": agent.to_dict(),
                "timestamp": datetime.now().isoformat()
            }
        except HTTPException:
            raise
        except Exception as e:
            logger.error(f"Erro ao obter agente {agent_id}: {e}")
            raise HTTPException(status_code=500, detail=f"Erro interno: {str(e)}")
    
    @app.post("/discover")
    async def trigger_discovery(background_tasks: BackgroundTasks, force: bool = False):
        """Dispara descoberta manual em background"""
        try:
            async def discover():
                await discovery_service.discover_agents(force_scan=force)
            
            background_tasks.add_task(discover)
            return {
                "success": True,
                "message": "Descoberta iniciada em background",
                "force_scan": force,
                "timestamp": datetime.now().isoformat()
            }
        except Exception as e:
            logger.error(f"Erro ao disparar descoberta: {e}")
            raise HTTPException(status_code=500, detail=f"Erro interno: {str(e)}")
    
    @app.post("/agents/{agent_id}/health")
    async def check_agent_health(agent_id: str):
        """Verifica sa√∫de de agente espec√≠fico"""
        try:
            is_healthy = await discovery_service.health_check_agent(agent_id)
            return {
                "success": True,
                "agent_id": agent_id,
                "healthy": is_healthy,
                "timestamp": datetime.now().isoformat()
            }
        except Exception as e:
            logger.error(f"Erro no health check de {agent_id}: {e}")
            raise HTTPException(status_code=500, detail=f"Erro no health check: {str(e)}")
    
    @app.get("/stats")
    async def get_stats():
        """Obt√©m estat√≠sticas detalhadas do sistema"""
        try:
            stats = discovery_service.get_agent_stats()
            return {
                "success": True,
                "stats": stats,
                "timestamp": datetime.now().isoformat()
            }
        except Exception as e:
            logger.error(f"Erro ao obter estat√≠sticas: {e}")
            raise HTTPException(status_code=500, detail=f"Erro interno: {str(e)}")
    
    @app.get("/health")
    async def api_health():
        """Health check da pr√≥pria API"""
        return {
            "success": True,
            "status": "healthy",
            "service": "Service Discovery API",
            "version": "2.0.0",
            "timestamp": datetime.now().isoformat()
        }
    
    return app


# üöÄ Script principal
if __name__ == "__main__":
    print("üîç Iniciando Service Discovery System refatorado...")
    
    try:
        # Inicializar service discovery
        discovery = ServiceDiscovery()
        
        # Criar API
        app = create_discovery_api(discovery)
        
        print(f"üîç Service Discovery iniciado em: http://{discovery.config.discovery.host}:{discovery.config.discovery.port}")
        print(f"üìñ API docs: http://{discovery.config.discovery.host}:{discovery.config.discovery.port}/docs")
        print(f"ü§ñ Agentes descobertos: http://{discovery.config.discovery.host}:{discovery.config.discovery.port}/agents")
        print(f"üìä Estat√≠sticas: http://{discovery.config.discovery.host}:{discovery.config.discovery.port}/stats")
        
        # Executar servidor
        uvicorn.run(
            app, 
            host=discovery.config.discovery.host, 
            port=discovery.config.discovery.port,
            log_level=discovery.config.logger.log_level.lower()
        )
        
    except KeyboardInterrupt:
        print("\nüõë Parando Service Discovery...")
    except Exception as e:
        print(f"‚ùå Erro fatal: {e}")
        logger.error(f"Erro fatal na inicializa√ß√£o: {e}")
    finally:
        try:
            discovery.stop()
        except:
            pass